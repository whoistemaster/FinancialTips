@page  "/accounts/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]


<h3 class="card-title"> Accounts </h3>
<a href="/accounts/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Account
</a>
<br />
<br />

@if (Accounts == null)
{
    <div class="alert alert-info">Loading Accounts...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Account Id</th>
                <th>Name</th>
                <th>Date</th>
                <th>Duration in days</th>
                <th>Year</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var account in Accounts)
            {
            <tr>
                <td>@account.Id</td>
                <td>@account.Customer.FirstName</td>
                <td>@account.DateCreated.Date.ToString("dd MMMM yyyy")</td>
                <td>@(account.DateIn != null ? (account.DateIn.Value -account.DateOut).TotalDays.ToString() : "To Be Determined")</td>                
                <td>@account.Tip.Year</td>
                <td>
                    <a href="/accounts/view/@account.Id" class="btn btn-primary">
                        <span class="oi oi-book"></span>
                    </a>
                    <a href="/accounts/edit/@account.Id" class="btn btn-warning">
                        <span class="oi oi-pencil"></span>
                    </a>
                    <button class="btn btn-danger" @onclick="@(()=>Delete(account.Id))">
                        <span class="oi oi-delete"></span>
                    </button>
                </td>
            </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Account> Accounts;
    private DateTime nullDT = new DateTime(1, 1, 1, 0, 0, 0);

    protected async override Task OnInitializedAsync()
    {
        Accounts = await _client.GetFromJsonAsync<List<Account>>($"{Endpoints.AccountsEndpoint}");
    }

    async Task Delete(int accountId)
    {
        var account = Accounts.First(q => q.Id == accountId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {account.Id}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.AccountsEndpoint}/{accountId}");
            await OnInitializedAsync();
        }
    }
}
