@page "/accounts/create/"
@inject HttpClient _client
@inject NavigationManager _navManager

<h3>Create New Accounts</h3>
<hr />
<br />
<EditForm Model="@account" OnValidSubmit="CreateAccount">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Financial Tips: </label>
        <div>
            <InputSelect @bind-Value="account.TipId" class="form-control">
                <option value=" ">-- Select Tip -- </option>
                @if (Tips != null)
                {
                    foreach (var tip in Tips)
                    {
                        <option value="@tip.Id">@tip.Blog.Name @tip.Chart.Name @tip.Community.Name @tip.FinancialPlanning.Name @tip.Insight.Name</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => account.TipId)" />
        </div>
    </div>

    
    <button type="submit" class="btn btn-success btn-block">
        Create Accounts
    </button>
</EditForm>


@code {
    Account account = new Account();

    private IList<Tip> Tips;
    private IList<Customer> Customers;


    protected async override Task OnInitializedAsync()
    {
        Tips = await _client.GetFromJsonAsync<List<Tip>>($"{Endpoints.TipsEndpoint}");
        Customers = await _client.GetFromJsonAsync<List<Customer>>($"{Endpoints.CustomersEndpoint}");
    }

    private async Task CreateAccount()
    {
        await _client.PostAsJsonAsync(Endpoints.AccountsEndpoint, account);
        _navManager.NavigateTo("/accounts/");
    }

}
