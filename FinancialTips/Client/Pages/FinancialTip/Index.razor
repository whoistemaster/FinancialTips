@page  "/tips/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@implements IDisposable


<h3 class="card-title"> Tips </h3>
<a href="/tips/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create Tips
</a>
<br />
<br />
@if (Tips == null)
{
    <div class="alert alert-info">Loading Tips...</div>
}
else
{
    <table class="table table-responsive" id="tipsTable">
        <thead>
            <tr>
                <th>Blog</th>
                <th>Chart</th>
                <th>Community</th>
                <th>FinancialPlanning</th>
                <th>Insights</th>
                <th>Year</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var tip in Tips)
            {
                <tr>
                    <td>@tip.Blog.Name</td>
                    <td>@tip.Chart.Name</td>
                    <td>@tip.Community.Name</td>
                    <td>@tip.FinancialPlanning.Name</td>
                    <td>@tip.Insight.Name</td>
                    <td>@tip.Year</td>
                    <td>
                        <a href="/tips/view/@tip.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/tips/edit/@tip.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(tip.Year))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Tip> Tips;

    protected async override Task OnInitializedAsync()
    {
        Tips = await _client.GetFromJsonAsync<List<Tip>>($"{Endpoints.TipsEndpoint}");
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#tipsTable");
    }

    public void Dispose()
    {
        js.InvokeVoidAsync("DataTablesDispose", "#tipsTable");
    }

    async Task Delete(int tipId)
    {
        var tip = Tips.First(q => q.Id == tipId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {tip.Year}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.TipsEndpoint}/{tipId}");
            await OnInitializedAsync();
        }
    }
}
